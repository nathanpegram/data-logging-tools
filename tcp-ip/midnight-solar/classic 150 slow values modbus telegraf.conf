# MidNite Solar Classic 150 MODBUS Configuration - Slow Logging
# Place this file in /etc/telegraf/telegraf.d/ or similar

###############################################################################
# MidNite Solar Classic 150 MODBUS TCP Input - Slow Data
###############################################################################

[[inputs.modbus]]
  name = "classic150_slow"
  name_override = "classic_slow"  # Override measurement name
  slave_id = 10  # Default Classic MODBUS address
  timeout = "3s"
  interval = "5m"  # Slow data collection every 5 minutes
  controller = "tcp://192.168.0.70:502"  # Replace with your Classic's IP address
  
  # Drop unwanted tags directly at input level
  tagexclude = ["name", "slave_id", "type"]
  
  # Slow changing values - counters, setpoints, system info
  holding_registers = [
    # Times & Counters
    # Minutes No Power (4135)
    { name = "minutes_no_power", byte_order = "AB", data_type = "UINT16", scale = 1.0, address = [4134] },
    
    # Float Time Today (4138) - Seconds
    { name = "float_time_today", byte_order = "AB", data_type = "UINT16", scale = 1.0, address = [4137] },
    
    # Absorb Time Counter (4139) - Seconds
    { name = "absorb_time_counter", byte_order = "AB", data_type = "UINT16", scale = 1.0, address = [4138] },
    
    # PWM Duty Cycle (4141) - 0-1023 range
    { name = "pwm_duty_cycle", byte_order = "AB", data_type = "UINT16", scale = 1.0, address = [4140] },
    
    # Reset Reason (4142)
    { name = "reset_reason", byte_order = "AB", data_type = "UINT16", scale = 1.0, address = [4141] },
    
    # Set Points
    # Battery Current Limit (4148) - Divide by 10 for amps
    { name = "current_limit", byte_order = "AB", data_type = "FIXED", scale = 0.1, address = [4147] },
    
    # Absorb Voltage Set Point (4149) - Divide by 10 for volts
    { name = "absorb_setpoint", byte_order = "AB", data_type = "FIXED", scale = 0.1, address = [4148] },
    
    # Float Voltage Set Point (4150) - Divide by 10 for volts
    { name = "float_setpoint", byte_order = "AB", data_type = "FIXED", scale = 0.1, address = [4149] },
    
    # Equalize Voltage Set Point (4151) - Divide by 10 for volts
    { name = "equalize_setpoint", byte_order = "AB", data_type = "FIXED", scale = 0.1, address = [4150] },
    
    # Sliding Current Limit (4152)
    { name = "sliding_current_limit", byte_order = "AB", data_type = "UINT16", scale = 1.0, address = [4151] },
    
    # System Info
    # Unit ID & Type (4101)
    { name = "unit_info", byte_order = "AB", data_type = "UINT16", scale = 1.0, address = [4100] },
    
    # Software Build Date Year (4102)
    { name = "sw_build_year", byte_order = "AB", data_type = "UINT16", scale = 1.0, address = [4101] },
    
    # Software Build Date Month/Day (4103)
    { name = "sw_build_month_day", byte_order = "AB", data_type = "UINT16", scale = 1.0, address = [4102] },
    
    # Network & Communication
    # MODBUS Port (4137)
    { name = "modbus_port", byte_order = "AB", data_type = "UINT16", scale = 1.0, address = [4136] },
    
    # Classic MODBUS Address (4326)
    { name = "modbus_address", byte_order = "AB", data_type = "UINT16", scale = 1.0, address = [4325] },
  ]

  # 32-bit Lifetime Values (require two consecutive registers)
  holding_registers = [
    # Lifetime kWh (4126/4127) - 32-bit value
    { name = "lifetime_kwh_low", byte_order = "AB", data_type = "UINT16", scale = 1.0, address = [4125] },
    { name = "lifetime_kwh_high", byte_order = "AB", data_type = "UINT16", scale = 1.0, address = [4126] },
    
    # Lifetime Amp Hours (4128/4129) - 32-bit value  
    { name = "lifetime_ah_low", byte_order = "AB", data_type = "UINT16", scale = 1.0, address = [4127] },
    { name = "lifetime_ah_high", byte_order = "AB", data_type = "UINT16", scale = 1.0, address = [4128] },
    
    # Info Flags 32-bit (4130/4131) - Status bits
    { name = "info_flags_low", byte_order = "AB", data_type = "UINT16", scale = 1.0, address = [4129] },
    { name = "info_flags_high", byte_order = "AB", data_type = "UINT16", scale = 1.0, address = [4130] },
  ]

  [inputs.modbus.tags]
    device_type = "solar_controller"
    manufacturer = "midnite_solar"
    model = "classic_150"
    rate = "slow"

###############################################################################
# Processing - Calculate derived values and decode status
###############################################################################

# Processor to decode unit info and calculate 32-bit values
[[processors.starlark]]
  namepass = ["classic_slow"]
  source = '''
def apply(metric):
    # Calculate 32-bit lifetime values
    if "lifetime_kwh_low" in metric.fields and "lifetime_kwh_high" in metric.fields:
        low = int(metric.fields["lifetime_kwh_low"])
        high = int(metric.fields["lifetime_kwh_high"])
        metric.fields["lifetime_kwh_total"] = (high << 16) + low
    
    if "lifetime_ah_low" in metric.fields and "lifetime_ah_high" in metric.fields:
        low = int(metric.fields["lifetime_ah_low"])
        high = int(metric.fields["lifetime_ah_high"])
        metric.fields["lifetime_ah_total"] = (high << 16) + low
    
    # Decode unit info
    if "unit_info" in metric.fields:
        raw_value = int(metric.fields["unit_info"])
        pcb_rev = (raw_value >> 8) & 0xFF
        unit_type = raw_value & 0xFF
        
        metric.fields["pcb_revision"] = pcb_rev
        metric.fields["unit_type"] = unit_type
        
        # Unit type names
        type_names = {150: "Classic150", 200: "Classic200", 250: "Classic250", 251: "Classic250KS"}
        if unit_type in type_names:
            metric.fields["unit_type_name"] = type_names[unit_type]
        else:
            metric.fields["unit_type_name"] = "Unknown_" + str(unit_type)
    
    return metric
  '''
