# MidNite Solar Classic 150 MODBUS Configuration - Fast Logging
# Place this file in /etc/telegraf/telegraf.d/ or similar

###############################################################################
# MidNite Solar Classic 150 MODBUS TCP Input - Fast Data
###############################################################################

[[inputs.modbus]]
  name = "classic150"
  name_override = "classic"  # Override measurement name
  slave_id = 10  # Default Classic MODBUS address
  timeout = "3s"
  interval = "10s"  # Fast data collection every 10 seconds
  controller = "tcp://192.168.0.70:502"  # Replace with your Classic's IP address
  
  # Drop unwanted tags and fields directly at input level
  tagexclude = ["name", "slave_id", "type"]
  fieldexclude = ["charge_stage_raw"]
  
  # Battery & Power Monitoring - Fast changing values
  holding_registers = [
    # Battery Voltage (4115) - Divide by 10 for volts
    { name = "battery_voltage", byte_order = "AB", data_type = "FIXED", scale = 0.1, address = [4114] },
    
    # PV Input Voltage (4116) - Divide by 10 for volts  
    { name = "pv_voltage", byte_order = "AB", data_type = "FIXED", scale = 0.1, address = [4115] },
    
    # Battery Current (4117) - Divide by 10 for amps
    { name = "battery_current", byte_order = "AB", data_type = "FIXED", scale = 0.1, address = [4116] },
    
    # Daily Energy (4118) - Divide by 10 for kWh
    { name = "daily_energy", byte_order = "AB", data_type = "FIXED", scale = 0.1, address = [4117] },
    
    # Power Output (4119) - Direct watts
    { name = "power_watts", byte_order = "AB", data_type = "UINT16", scale = 1.0, address = [4118] },
    
    # Charge Stage & State (4120) - Combined register
    { name = "charge_stage_raw", byte_order = "AB", data_type = "UINT16", scale = 1.0, address = [4119] },
    
    # PV Input Current (4121) - Divide by 10 for amps
    { name = "pv_current", byte_order = "AB", data_type = "FIXED", scale = 0.1, address = [4120] },
    
    # Last VOC Reading (4122) - Divide by 10 for volts
    { name = "voc_last", byte_order = "AB", data_type = "FIXED", scale = 0.1, address = [4121] },
    
    # Highest Input Voltage (4123) - Divide by 10 for volts
    { name = "highest_vin", byte_order = "AB", data_type = "FIXED", scale = 0.1, address = [4122] },
    
    # Daily Amp Hours (4125)
    { name = "daily_amp_hours", byte_order = "AB", data_type = "UINT16", scale = 1.0, address = [4124] },
    
    # Temperature Readings - Change frequently
    # Battery Temperature (4132) - Divide by 10 for °C
    { name = "battery_temp", byte_order = "AB", data_type = "FIXED", scale = 0.1, address = [4131] },
    
    # FET Temperature (4133) - Divide by 10 for °C
    { name = "fet_temp", byte_order = "AB", data_type = "FIXED", scale = 0.1, address = [4132] },
    
    # PCB Temperature (4134) - Divide by 10 for °C
    { name = "pcb_temp", byte_order = "AB", data_type = "FIXED", scale = 0.1, address = [4133] },
  ]

  [inputs.modbus.tags]
    device_type = "solar_controller"
    manufacturer = "midnite_solar"
    model = "classic_150"
    rate = "fast"

###############################################################################
# Processing - Calculate derived values and decode status
###############################################################################

# Processor to decode charge stage from combined register
[[processors.starlark]]
  namepass = ["classic"]
  source = '''
def apply(metric):
    # Decode charge stage from register 4120
    if "charge_stage_raw" in metric.fields:
        raw_value = int(metric.fields["charge_stage_raw"])
        charge_stage = (raw_value >> 8) & 0xFF  # High byte
        state = raw_value & 0xFF                # Low byte
        
        # Decode charge stage
        stage_names = {
            0: "Resting",
            3: "Absorb", 
            4: "BulkMPPT",
            5: "Float",
            6: "FloatMPPT", 
            7: "Equalize",
            10: "HyperVOC",
            18: "EqMPPT"
        }
        
        if charge_stage in stage_names:
            metric.fields["charge_stage"] = stage_names[charge_stage]
        else:
            metric.fields["charge_stage"] = "Unknown_" + str(charge_stage)
        metric.fields["charge_state"] = state
    
    return metric
  '''

# Processor to add efficiency calculations
[[processors.starlark]]
  namepass = ["classic"]
  source = '''
def apply(metric):
    # Calculate efficiency if we have both input and output power
    if "pv_voltage" in metric.fields and "pv_current" in metric.fields and "power_watts" in metric.fields:
        pv_voltage = float(metric.fields["pv_voltage"])
        pv_current = float(metric.fields["pv_current"])
        output_power = float(metric.fields["power_watts"])
        
        input_power = pv_voltage * pv_current
        if input_power > 0:
            efficiency = (output_power / input_power) * 100
            metric.fields["efficiency_percent"] = efficiency
            metric.fields["input_power_calc"] = input_power
    
    return metric
  '''
